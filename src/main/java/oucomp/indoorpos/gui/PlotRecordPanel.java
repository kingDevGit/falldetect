/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package oucomp.indoorpos.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import oucomp.indoorpos.AccelRecord;

public class PlotRecordPanel extends javax.swing.JPanel {
  // model
  protected AccelRecord record = null;
  // charting variable
  protected CombinedDomainXYPlot thePlot = null;
  protected XYPlot samplePlot;
  protected XYSeriesCollection sampleSeriesCollection;
  protected String plotLabelArray[] = {"Red", "Green", "Blue"};
  protected Color plotColourArray[] = {Color.RED, Color.GREEN, Color.BLUE};
  protected XYPlot rmsPlot;
  protected XYSeriesCollection rmsSeriesCollection;
  protected JFreeChart theChart = null;
  protected ChartPanel chartPanel = null;

  public PlotRecordPanel() {
    initComponents();
    createChart();
  }

  protected void createChart() {
    if (theChart == null) {
      System.out.println("[RecordPanel] Create Chart");
      thePlot = new CombinedDomainXYPlot(new NumberAxis("Accelerometer Records"));
      thePlot.setGap(40.0);
      thePlot.setOrientation(PlotOrientation.VERTICAL);
      // create sample subplot
      sampleSeriesCollection = new XYSeriesCollection();
      samplePlot = new XYPlot(sampleSeriesCollection, null, new NumberAxis("Acceleration (g)"), new StandardXYItemRenderer());
      samplePlot.getRenderer().setSeriesPaint(0, plotColourArray[0]);
      samplePlot.getRenderer().setSeriesPaint(1, plotColourArray[1]);
      samplePlot.getRenderer().setSeriesPaint(2, plotColourArray[2]);
      samplePlot.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
      samplePlot.getRangeAxis().setRange(-30, 30);
      thePlot.add(samplePlot, 1);
      // create rms subplot
      rmsSeriesCollection = new XYSeriesCollection();
      rmsPlot = new XYPlot(rmsSeriesCollection, null, new NumberAxis("RMS (g)"), new StandardXYItemRenderer());
      rmsPlot.getRenderer().setSeriesPaint(0, Color.RED);
      rmsPlot.getRenderer().setSeriesPaint(1, Color.CYAN);      
      rmsPlot.getRangeAxis().setRange(0, 3.5);
      rmsPlot.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
      thePlot.add(rmsPlot, 1); 
      // create chart
      theChart = new JFreeChart("Fall DataSet",
              JFreeChart.DEFAULT_TITLE_FONT,
              thePlot, true);
      chartPanel = new ChartPanel(theChart, false);
      chartPanel.setPreferredSize(new Dimension(360, 240));
      this.add(chartPanel, BorderLayout.CENTER);
    }
  }

  protected void updateChart() {
    if (record == null || record.getSamples() == null) {
      return;
    }
    sampleSeriesCollection.removeAllSeries();
    XYSeries seriesArray[] = new XYSeries[3];
    String seriesLabelArray[] = {"D2X", "D2Y", "D2Z"};
    double samplePeriod = record.getSamplePeriod();
    for (int i = 0; i < 3; i++) {
      seriesArray[i] = new XYSeries(seriesLabelArray[i]);
      double sample[][] = record.getSamples();
      for (int j = 0; j < sample.length; j++) {
        seriesArray[i].add(j * samplePeriod, sample[j][i]);
      }
      sampleSeriesCollection.addSeries(seriesArray[i]);
    }

    double rms[] = record.getRMSArray();
    rmsSeriesCollection.removeAllSeries();
    XYSeries rmsSeries = new XYSeries("RMS (g)");
    for (int j = 0; j < rms.length; j++) {
      rmsSeries.add(j * samplePeriod, rms[j]);
    }
    rmsSeriesCollection.addSeries(rmsSeries);
    /*
    double vel[] = record.getVelocityArray();
    XYSeries velSeries = new XYSeries("Velocity (m/s)");
    for (int j = 0; j < vel.length; j++) {
      velSeries.add(j * samplePeriod, vel[j]);
    }
    rmsSeriesCollection.addSeries(velSeries); 
    */
  }

  public void setAccelRecord(AccelRecord record) {
    this.record = record;
    updateChart();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setMinimumSize(new java.awt.Dimension(640, 360));
    setPreferredSize(new java.awt.Dimension(640, 360));
    setLayout(new java.awt.BorderLayout());
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
