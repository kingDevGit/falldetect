package oucomp.falldetect;

import oucomp.falldetect.data.AccelRecord;
import java.awt.Color;
import java.awt.Component;
import java.util.HashMap;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;

public class FallDetectorPanel extends javax.swing.JPanel {
  // model

  private AccelRecord record = null;
  private DefaultListModel theListModel;

  public FallDetectorPanel() {
    initComponents();
    // get the model object from the list and clear it first
    DefaultListModel model = new DefaultListModel();
    // create detector objects
    {
      HashMap<String, Object> properties = new HashMap();
      properties.put("threshold.low", 0.5D);
      properties.put("threshold.high", 4.3D);
      FallDetectorAbstract fallDetector = new FallDetectorBuorke2007(properties);
      model.addElement(fallDetector);
    }
    // create detector
    {
      HashMap<String, Object> properties = new HashMap();
      properties.put("window.size", 25);
      properties.put("threshold.abovemean", 1.5);
      properties.put("threshold.min", 4.0);
      FallDetectorAbstract fallDetector = new FallDetectorPeakFinder(properties);
      model.addElement(fallDetector);
    }
    // create detector
    {
      HashMap<String, Object> properties = new HashMap();
      properties.put("window.size", 25);
      properties.put("threshold.abovemean", 1.5);
      properties.put("threshold.min", 4.0);
      FallDetectorAbstract fallDetector = new FallDetectorFeatureExtractor(properties);
      model.addElement(fallDetector);
    }
    // create detector
    {
      HashMap<String, Object> properties = new HashMap();
      properties.put("window.size", 25);
      properties.put("threshold.abovemean", 1.5);
      properties.put("threshold.min", 4.0);      
      FallDetectorAbstract fallDetector = new FallDetectorMLJ48(properties);
      model.addElement(fallDetector);
    }
    // add model to JList
    jList1.setModel(model);
    jList1.setCellRenderer(new DefaultListCellRenderer() {
      public Component getListCellRendererComponent(
              JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        FallDetectorAbstract fallDetector = (FallDetectorAbstract) value;
        label.setText(fallDetector.getName());
        return label;
      }
    });
    jList1.setSelectedIndex(0);
  }

  private void evaluate() {
    Object selected = jList1.getSelectedValue();
    FallDetectorAbstract fallDetector = (FallDetectorAbstract) selected;
    EvaluationResult er = fallDetector.evaluate(record);
    jTextArea1.setText(er.toString());
  }

  public void setAccelRecord(AccelRecord record) {
    this.record = record;
    evaluate();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();
    jScrollPane2 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();

    setMinimumSize(new java.awt.Dimension(220, 200));
    setPreferredSize(new java.awt.Dimension(220, 200));
    setLayout(new java.awt.GridBagLayout());

    jScrollPane1.setHorizontalScrollBar(null);
    jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 100));
    jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 100));

    jList1.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Buorke 2007" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    jList1.setPreferredSize(new java.awt.Dimension(120, 80));
    jScrollPane1.setViewportView(jList1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jScrollPane1, gridBagConstraints);

    jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

    jTextArea1.setColumns(20);
    jTextArea1.setRows(5);
    jScrollPane2.setViewportView(jTextArea1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(jScrollPane2, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList jList1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextArea jTextArea1;
  // End of variables declaration//GEN-END:variables
}
